
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Regra geral: permitir leitura e escrita para usuários autenticados por padrão.
    // RESTRINJA ISSO ANTES DA PRODUÇÃO!
    match /{document=**} {
      allow read, write: if request.auth != null;
    }

    // Usuários:
    // - Podem criar seu próprio perfil (ao se cadastrar).
    // - Podem ler qualquer perfil (para leaderboards, etc.).
    // - Só podem atualizar seu próprio perfil.
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
      // allow delete: if request.auth != null && request.auth.uid == userId; // Delete geralmente é restrito
    }

    // Ofertas:
    // - Usuários autenticados podem ler todas as ofertas.
    // - Anunciantes (isAdvertiser == true) podem criar ofertas.
    // - O criador da oferta (merchantId == request.auth.uid) pode atualizar sua própria oferta.
    match /offers/{offerId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.merchantId == request.auth.uid && getUserData(request.auth.uid).data.isAdvertiser == true;
      allow update: if request.auth != null && request.resource.data.merchantId == request.auth.uid && getUserData(request.auth.uid).data.isAdvertiser == true;
      // allow delete: if request.auth != null && request.resource.data.merchantId == request.auth.uid; // Delete geralmente é restrito

      // Comentários de ofertas:
      // - Usuários autenticados podem ler comentários.
      // - Usuários autenticados podem adicionar comentários.
      // - O autor do comentário pode atualizar/deletar seu próprio comentário.
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
      }
    }

    // Sorteios:
    // - Usuários autenticados podem ler todos os sorteios.
    // - Anunciantes (isAdvertiser == true) podem criar sorteios.
    // - O criador do sorteio (createdBy == request.auth.uid) pode atualizar seu próprio sorteio.
    match /sweepstakes/{sweepstakeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid && getUserData(request.auth.uid).data.isAdvertiser == true;
      allow update: if request.auth != null && request.resource.data.createdBy == request.auth.uid && getUserData(request.auth.uid).data.isAdvertiser == true;

      // Participantes de sorteios:
      // - Usuários autenticados podem se inscrever (criar).
      // - O criador do sorteio pode ler os participantes.
      match /participants/{participantId} {
        allow read: if request.auth != null && getParentData('sweepstakes', sweepstakeId).data.createdBy == request.auth.uid;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      }

      // Ganhadores de sorteios:
      // - Todos os usuários autenticados podem ler os ganhadores.
      // - Apenas o criador do sorteio pode adicionar/modificar ganhadores.
      match /winners/{winnerId} {
        allow read: if request.auth != null;
        allow create, update, delete: if request.auth != null && getParentData('sweepstakes', sweepstakeId).data.createdBy == request.auth.uid;
      }
    }

    // Função auxiliar para obter dados do usuário
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId));
    }
    
    // Função auxiliar para obter dados do documento pai
    function getParentData(collectionName, documentId) {
      return get(/databases/$(database)/documents/$(collectionName)/$(documentId));
    }
  }
}
